// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test PageLayout renders without crashing 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "5dmvm4",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "5dmvm4",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <PageLayout
      isBurgerMenuOpen={true}
      isLightMode={true}
    >
      <div
        className="container"
      >
        <withRouter(Header)
          isBurgerMenuOpen={true}
          isLightMode={true}
        >
          <Header
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "key": "5dmvm4",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "key": "5dmvm4",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isBurgerMenuOpen={true}
            isLightMode={true}
            location={
              Object {
                "hash": "",
                "key": "5dmvm4",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
          >
            <div
              className="Header"
            >
              <div>
                <Link
                  to="/"
                >
                  <LinkAnchor
                    href="/"
                    navigate={[Function]}
                  >
                    <a
                      href="/"
                      onClick={[Function]}
                    >
                      <img
                        alt="logo"
                        src={Object {}}
                      />
                    </a>
                  </LinkAnchor>
                </Link>
              </div>
              <div
                className="leftSide"
              >
                <a
                  className="themeMode"
                >
                  <img
                    alt="theme"
                    src={Object {}}
                  />
                </a>
                <Link
                  key="Become a host"
                  to="/become-a-host"
                >
                  <LinkAnchor
                    href="/become-a-host"
                    navigate={[Function]}
                  >
                    <a
                      href="/become-a-host"
                      onClick={[Function]}
                    >
                      Become a host
                    </a>
                  </LinkAnchor>
                </Link>
                <Link
                  key="Help"
                  to="/become-a-host"
                >
                  <LinkAnchor
                    href="/become-a-host"
                    navigate={[Function]}
                  >
                    <a
                      href="/become-a-host"
                      onClick={[Function]}
                    >
                      Help
                    </a>
                  </LinkAnchor>
                </Link>
                <Link
                  key="Sign up"
                  to="/become-a-host"
                >
                  <LinkAnchor
                    href="/become-a-host"
                    navigate={[Function]}
                  >
                    <a
                      href="/become-a-host"
                      onClick={[Function]}
                    >
                      Sign up
                    </a>
                  </LinkAnchor>
                </Link>
                <Link
                  key="Log in"
                  to="/become-a-host"
                >
                  <LinkAnchor
                    href="/become-a-host"
                    navigate={[Function]}
                  >
                    <a
                      href="/become-a-host"
                      onClick={[Function]}
                    >
                      Log in
                    </a>
                  </LinkAnchor>
                </Link>
              </div>
            </div>
          </Header>
        </withRouter(Header)>
        <AppContent>
          <withRouter(Routes)>
            <Routes
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "key": "5dmvm4",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "5dmvm4",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "key": "5dmvm4",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <Switch>
                <Route
                  component={[Function]}
                  computedMatch={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  exact={true}
                  key="/"
                  location={
                    Object {
                      "hash": "",
                      "key": "5dmvm4",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  path="/"
                >
                  <Autocomplete
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "key": "5dmvm4",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "key": "5dmvm4",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "key": "5dmvm4",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                  >
                    <div
                      className="Autocomplete darkMode"
                    >
                      <img
                        alt="search"
                        src={Object {}}
                      />
                      <input
                        onChange={[Function]}
                        onKeyDown={[Function]}
                        type="text"
                        value=""
                      />
                    </div>
                  </Autocomplete>
                </Route>
              </Switch>
            </Routes>
          </withRouter(Routes)>
        </AppContent>
      </div>
    </PageLayout>
  </Router>
</MemoryRouter>
`;

exports[`Test PageLayout renders without crashing with dark mode 1`] = `
<MemoryRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "key": "cyxjsz",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "key": "cyxjsz",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <PageLayout
      isBurgerMenuOpen={false}
      isLightMode={false}
    >
      <div
        className="container darkMode"
      >
        <withRouter(Header)
          isBurgerMenuOpen={false}
          isLightMode={false}
        >
          <Header
            history={
              Object {
                "action": "POP",
                "block": [Function],
                "canGo": [Function],
                "createHref": [Function],
                "entries": Array [
                  Object {
                    "hash": "",
                    "key": "cyxjsz",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                ],
                "go": [Function],
                "goBack": [Function],
                "goForward": [Function],
                "index": 0,
                "length": 1,
                "listen": [Function],
                "location": Object {
                  "hash": "",
                  "key": "cyxjsz",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                },
                "push": [Function],
                "replace": [Function],
              }
            }
            isBurgerMenuOpen={false}
            isLightMode={false}
            location={
              Object {
                "hash": "",
                "key": "cyxjsz",
                "pathname": "/",
                "search": "",
                "state": undefined,
              }
            }
            match={
              Object {
                "isExact": true,
                "params": Object {},
                "path": "/",
                "url": "/",
              }
            }
          >
            <div
              className="Header"
            >
              <div>
                <Link
                  to="/"
                >
                  <LinkAnchor
                    href="/"
                    navigate={[Function]}
                  >
                    <a
                      href="/"
                      onClick={[Function]}
                    >
                      <img
                        alt="logo"
                        src={Object {}}
                      />
                    </a>
                  </LinkAnchor>
                </Link>
              </div>
              <div
                className="leftSide"
              >
                <a
                  className="themeMode"
                >
                  <img
                    alt="theme"
                    src={Object {}}
                  />
                </a>
                <Link
                  key="Become a host"
                  to="/become-a-host"
                >
                  <LinkAnchor
                    href="/become-a-host"
                    navigate={[Function]}
                  >
                    <a
                      href="/become-a-host"
                      onClick={[Function]}
                    >
                      Become a host
                    </a>
                  </LinkAnchor>
                </Link>
                <Link
                  key="Help"
                  to="/become-a-host"
                >
                  <LinkAnchor
                    href="/become-a-host"
                    navigate={[Function]}
                  >
                    <a
                      href="/become-a-host"
                      onClick={[Function]}
                    >
                      Help
                    </a>
                  </LinkAnchor>
                </Link>
                <Link
                  key="Sign up"
                  to="/become-a-host"
                >
                  <LinkAnchor
                    href="/become-a-host"
                    navigate={[Function]}
                  >
                    <a
                      href="/become-a-host"
                      onClick={[Function]}
                    >
                      Sign up
                    </a>
                  </LinkAnchor>
                </Link>
                <Link
                  key="Log in"
                  to="/become-a-host"
                >
                  <LinkAnchor
                    href="/become-a-host"
                    navigate={[Function]}
                  >
                    <a
                      href="/become-a-host"
                      onClick={[Function]}
                    >
                      Log in
                    </a>
                  </LinkAnchor>
                </Link>
              </div>
            </div>
          </Header>
        </withRouter(Header)>
        <AppContent>
          <withRouter(Routes)>
            <Routes
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "key": "cyxjsz",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "cyxjsz",
                    "pathname": "/",
                    "search": "",
                    "state": undefined,
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
              location={
                Object {
                  "hash": "",
                  "key": "cyxjsz",
                  "pathname": "/",
                  "search": "",
                  "state": undefined,
                }
              }
              match={
                Object {
                  "isExact": true,
                  "params": Object {},
                  "path": "/",
                  "url": "/",
                }
              }
            >
              <Switch>
                <Route
                  component={[Function]}
                  computedMatch={
                    Object {
                      "isExact": true,
                      "params": Object {},
                      "path": "/",
                      "url": "/",
                    }
                  }
                  exact={true}
                  key="/"
                  location={
                    Object {
                      "hash": "",
                      "key": "cyxjsz",
                      "pathname": "/",
                      "search": "",
                      "state": undefined,
                    }
                  }
                  path="/"
                >
                  <Autocomplete
                    history={
                      Object {
                        "action": "POP",
                        "block": [Function],
                        "canGo": [Function],
                        "createHref": [Function],
                        "entries": Array [
                          Object {
                            "hash": "",
                            "key": "cyxjsz",
                            "pathname": "/",
                            "search": "",
                            "state": undefined,
                          },
                        ],
                        "go": [Function],
                        "goBack": [Function],
                        "goForward": [Function],
                        "index": 0,
                        "length": 1,
                        "listen": [Function],
                        "location": Object {
                          "hash": "",
                          "key": "cyxjsz",
                          "pathname": "/",
                          "search": "",
                          "state": undefined,
                        },
                        "push": [Function],
                        "replace": [Function],
                      }
                    }
                    location={
                      Object {
                        "hash": "",
                        "key": "cyxjsz",
                        "pathname": "/",
                        "search": "",
                        "state": undefined,
                      }
                    }
                    match={
                      Object {
                        "isExact": true,
                        "params": Object {},
                        "path": "/",
                        "url": "/",
                      }
                    }
                  >
                    <div
                      className="Autocomplete darkMode"
                    >
                      <img
                        alt="search"
                        src={Object {}}
                      />
                      <input
                        onChange={[Function]}
                        onKeyDown={[Function]}
                        type="text"
                        value=""
                      />
                    </div>
                  </Autocomplete>
                </Route>
              </Switch>
            </Routes>
          </withRouter(Routes)>
        </AppContent>
      </div>
    </PageLayout>
  </Router>
</MemoryRouter>
`;
